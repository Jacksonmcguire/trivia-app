{"ast":null,"code":"var _jsxFileName = \"/Users/jackson/turing/projects/trivia-app/web/src/components/InGame/InGame.js\",\n    _s = $RefreshSig$();\n\nimport { QuestionSlide } from '../QuestionSlide/QuestionSlide';\nimport { ScoreBoard } from '../ScoreBoard/ScoreBoard';\nimport './InGame.scss';\nimport { useState, useEffect, useRef } from 'react';\nimport { EndSlide } from '../EndSlide/EndSlide';\nimport { Chat } from '../Chat/Chat';\nimport { socket } from '../App/App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InGame = ({\n  slideDeck\n}) => {\n  _s();\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [incorrectAnswers, setIncorrectAnswers] = useState([]);\n  useEffect(() => {\n    socket.on('new game', roomName => {\n      console.log('new game in room:', roomName);\n    });\n    socket.on('answer received');\n  });\n\n  const questionSlides = () => {\n    if (slideDeck.length) {\n      const slideCards = slideDeck.map(question => {\n        // console.log(question)\n        return /*#__PURE__*/_jsxDEV(QuestionSlide, {\n          category: question.category,\n          incorrectAnswers: question.incorrect_answers,\n          correct: question.correct_answer,\n          question: question.question,\n          type: question.type,\n          evaluateAnswer: evaluateAnswer\n        }, question.question, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this);\n      });\n      return slideCards[currentQuestion] ? slideCards[currentQuestion] : /*#__PURE__*/_jsxDEV(EndSlide, {\n        slideCards: slideDeck,\n        score: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 73\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"sorry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }, this);\n  };\n\n  const evaluateAnswer = (correct, answer) => {\n    if (answer === correct) {\n      setScore(score + 1);\n    } else {\n      setIncorrectAnswers([...incorrectAnswers, answer]);\n    }\n\n    setCurrentQuestion(currentQuestion + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"in-game\",\n    children: [questionSlides(), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      question: currentQuestion,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InGame, \"rUp8uZ88eVHludp9NTpNzPkBp7w=\");\n\n_c = InGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"InGame\");","map":{"version":3,"sources":["/Users/jackson/turing/projects/trivia-app/web/src/components/InGame/InGame.js"],"names":["QuestionSlide","ScoreBoard","useState","useEffect","useRef","EndSlide","Chat","socket","InGame","slideDeck","currentQuestion","setCurrentQuestion","score","setScore","incorrectAnswers","setIncorrectAnswers","on","roomName","console","log","questionSlides","length","slideCards","map","question","category","incorrect_answers","correct_answer","type","evaluateAnswer","correct","answer"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,gCAA9B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAO,eAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAAQC,IAAR,QAAmB,cAAnB;AACA,SAAQC,MAAR,QAAqB,YAArB;;AAEA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AAAA;;AACrC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACY,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,CAAC,EAAD,CAAxD;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,MAAM,CAACS,EAAP,CAAU,UAAV,EAAuBC,QAAD,IAAc;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,QAAjC;AACD,KAFD;AAIAV,IAAAA,MAAM,CAACS,EAAP,CAAU,iBAAV;AAED,GAPQ,CAAT;;AASA,QAAMI,cAAc,GAAG,MAAM;AAC3B,QAAIX,SAAS,CAACY,MAAd,EAAsB;AACpB,YAAMC,UAAU,GAAGb,SAAS,CAACc,GAAV,CAAcC,QAAQ,IAAI;AAC3C;AACA,4BACE,QAAC,aAAD;AACA,UAAA,QAAQ,EAAEA,QAAQ,CAACC,QADnB;AAEA,UAAA,gBAAgB,EAAED,QAAQ,CAACE,iBAF3B;AAGA,UAAA,OAAO,EAAEF,QAAQ,CAACG,cAHlB;AAIA,UAAA,QAAQ,EAAEH,QAAQ,CAACA,QAJnB;AAKA,UAAA,IAAI,EAAEA,QAAQ,CAACI,IALf;AAMA,UAAA,cAAc,EAAEC;AANhB,WAOKL,QAAQ,CAACA,QAPd;AAAA;AAAA;AAAA;AAAA,gBADF;AAWC,OAbgB,CAAnB;AAcA,aAAOF,UAAU,CAACZ,eAAD,CAAV,GAA6BY,UAAU,CAACZ,eAAD,CAAvC,gBAA2D,QAAC,QAAD;AAAU,QAAA,UAAU,EAAED,SAAtB;AAAiC,QAAA,KAAK,EAAEG;AAAxC;AAAA;AAAA;AAAA;AAAA,cAAlE;AACC,KAhBH,MAgBS,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACV,GAlBD;;AAoBA,QAAMiB,cAAc,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1C,QAAIA,MAAM,KAAKD,OAAf,EAAwB;AACtBjB,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD,KAFD,MAEO;AACLG,MAAAA,mBAAmB,CAAC,CAAC,GAAGD,gBAAJ,EAAsBiB,MAAtB,CAAD,CAAnB;AACD;;AACDpB,IAAAA,kBAAkB,CAACD,eAAe,GAAG,CAAnB,CAAlB;AAED,GARD;;AAUA,sBACE;AAAM,IAAA,SAAS,EAAC,SAAhB;AAAA,eACGU,cAAc,EADjB,eAEE,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEV,eAAtB;AAAuC,MAAA,KAAK,EAAEE;AAA9C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CApDM;;GAAMJ,M;;KAAAA,M","sourcesContent":["import { QuestionSlide } from '../QuestionSlide/QuestionSlide'\nimport { ScoreBoard } from '../ScoreBoard/ScoreBoard'\nimport './InGame.scss'\nimport { useState, useEffect, useRef } from 'react'\nimport { EndSlide } from '../EndSlide/EndSlide'\nimport {Chat} from '../Chat/Chat'\nimport {socket} from '../App/App'\n\nexport const InGame = ({slideDeck}) => {\n  const [currentQuestion, setCurrentQuestion] = useState(0)\n  const [score, setScore] = useState(0)\n  const [incorrectAnswers, setIncorrectAnswers] = useState([])\n  \n\n  useEffect(() => {\n    socket.on('new game', (roomName) => {\n      console.log('new game in room:', roomName)\n    })\n\n    socket.on('answer received')\n\n  })\n\n  const questionSlides = () => {\n    if (slideDeck.length) {\n      const slideCards = slideDeck.map(question => {\n        // console.log(question)\n        return (\n          <QuestionSlide\n          category={question.category}\n          incorrectAnswers={question.incorrect_answers}\n          correct={question.correct_answer}\n          question={question.question}\n          type={question.type}\n          evaluateAnswer={evaluateAnswer}\n          key={question.question}\n          />\n          )\n        })\n      return slideCards[currentQuestion]? slideCards[currentQuestion] : <EndSlide slideCards={slideDeck} score={score}/>\n      } else return <div>sorry</div>\n  }\n\n  const evaluateAnswer = (correct, answer) => {\n    if (answer === correct) {\n      setScore(score + 1)\n    } else {\n      setIncorrectAnswers([...incorrectAnswers, answer])\n    }\n    setCurrentQuestion(currentQuestion + 1)\n\n  }\n      \n  return (\n    <main className=\"in-game\">\n      {questionSlides()}\n      <ScoreBoard question={currentQuestion} score={score}/>\n      <Chat></Chat>\n    </main>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}