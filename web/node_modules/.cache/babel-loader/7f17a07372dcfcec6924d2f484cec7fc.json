{"ast":null,"code":"var _jsxFileName = \"/Users/jackson/turing/projects/trivia-app/web/src/components/InGame/InGame.js\";\nimport { QuestionSlide } from '../QuestionSlide/QuestionSlide';\nimport { ScoreBoard } from '../ScoreBoard/ScoreBoard';\nimport './InGame.scss';\nimport { Component } from 'react';\nimport { EndSlide } from '../EndSlide/EndSlide';\nimport { Chat } from '../Chat/Chat';\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class InGame extends Component {\n  constructor() {\n    super();\n    this.socket = io.connect(\"http://localhost:4000\");\n\n    this.componentDidUpdate = () => {\n      this.socket.on('new game', () => {\n        console.log('new game');\n      });\n    };\n\n    this.questionSlides = () => {\n      if (this.props.slides.length) {\n        const slides = this.props.slides.map(question => {\n          console.log(question);\n          return /*#__PURE__*/_jsxDEV(QuestionSlide, {\n            category: question.category,\n            incorrectAnswers: question.incorrect_answers,\n            correct: question.correct_answer,\n            question: question.question,\n            type: question.type,\n            evaluateAnswer: this.evaluateAnswer\n          }, question.question, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 11\n          }, this);\n        });\n        return slides[this.state.currentQuestion] ? slides[this.state.currentQuestion] : /*#__PURE__*/_jsxDEV(EndSlide, {\n          slides: slides,\n          score: this.state.score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 87\n        }, this);\n      } else return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"sorry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this);\n    };\n\n    this.evaluateAnswer = (correct, answer) => {\n      if (answer === correct) {\n        this.setState({ ...this.state,\n          score: this.state.score + 1,\n          currentQuestion: this.state.currentQuestion + 1\n        });\n      } else this.setState({ ...this.state,\n        incorrectAnswers: [...this.state.incorrectAnswers, answer],\n        currentQuestion: this.state.currentQuestion + 1\n      });\n    };\n\n    this.state = {\n      currentQuestion: 0,\n      slides: [],\n      score: 0,\n      incorrectAnswers: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"in-game\",\n      children: [this.questionSlides(), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n        question: this.state.currentQuestion,\n        score: this.state.score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/jackson/turing/projects/trivia-app/web/src/components/InGame/InGame.js"],"names":["QuestionSlide","ScoreBoard","Component","EndSlide","Chat","io","InGame","constructor","socket","connect","componentDidUpdate","on","console","log","questionSlides","props","slides","length","map","question","category","incorrect_answers","correct_answer","type","evaluateAnswer","state","currentQuestion","score","correct","answer","setState","incorrectAnswers","render"],"mappings":"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","sourcesContent":["import { QuestionSlide } from '../QuestionSlide/QuestionSlide'\nimport { ScoreBoard } from '../ScoreBoard/ScoreBoard'\nimport './InGame.scss'\nimport { Component } from 'react'\nimport { EndSlide } from '../EndSlide/EndSlide'\nimport {Chat} from '../Chat/Chat'\nimport io from \"socket.io-client\"\n\nexport class InGame extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentQuestion: 0,\n      slides: [],\n      score: 0,\n      incorrectAnswers: [],\n    }\n  }\n  \n  socket = io.connect(\"http://localhost:4000\")\n\n  componentDidUpdate = () => {\n    this.socket.on('new game', () => {\n      console.log('new game')\n    })\n  }\n\n  questionSlides = () => {\n    if (this.props.slides.length) {\n      const slides = this.props.slides.map(question => {\n        console.log(question)\n        return (\n          <QuestionSlide\n          category={question.category}\n          incorrectAnswers={question.incorrect_answers}\n          correct={question.correct_answer}\n          question={question.question}\n          type={question.type}\n          evaluateAnswer={this.evaluateAnswer}\n          key={question.question}\n          />\n          )\n        })\n      return slides[this.state.currentQuestion]? slides[this.state.currentQuestion] : <EndSlide slides={slides} score={this.state.score}/>\n      } else return <div>sorry</div>\n  }\n\n  evaluateAnswer = (correct, answer) => {\n    if (answer === correct) {\n      this.setState({...this.state, score: this.state.score + 1, currentQuestion: this.state.currentQuestion + 1})\n    } else this.setState({...this.state, incorrectAnswers: [...this.state.incorrectAnswers, answer], currentQuestion: this.state.currentQuestion + 1})\n\n  }\n      \n      render () {\n    return (\n      <main className=\"in-game\">\n        {this.questionSlides()}\n        <ScoreBoard question={this.state.currentQuestion} score={this.state.score}/>\n        <Chat></Chat>\n      </main>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}