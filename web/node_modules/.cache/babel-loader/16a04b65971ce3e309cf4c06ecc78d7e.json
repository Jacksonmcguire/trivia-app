{"ast":null,"code":"var _jsxFileName = \"/Users/jackson/turing/projects/trivia-app/src/components/QuestionSlide/QuestionSlide.js\",\n    _s = $RefreshSig$();\n\nimport './QuestionSlide.scss';\nimport { useState } from 'react';\nimport { decodeHTML } from '../../utilities';\nimport { RadioGroup } from '@headlessui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionSlide = ({\n  category,\n  incorrectAnswers,\n  correct,\n  question,\n  type,\n  evaluateAnswer\n}) => {\n  _s();\n\n  const [answer, setAnswer] = useState('');\n\n  const addAnswers = () => {\n    const randomIndex = Math.floor(Math.random() * 4);\n\n    if (!incorrectAnswers.includes(correct)) {\n      incorrectAnswers.splice(randomIndex, 0, correct);\n    }\n\n    return incorrectAnswers.map((answer, index) => {\n      return /*#__PURE__*/_jsxDEV(RadioGroup.Option, {\n        value: answer,\n        children: ({\n          checked\n        }) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: checked ? \"bg-blue-200\" : \"\",\n          children: \"Startup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this); // <div className=\"option\">\n      // <input type=\"checkbox\" id={'opt' + index + 1} name=\"option\"/>\n      // <label htmlFor={'opt' + index + 1}>{decodeHTML(answer)}</label>\n      // </div>\n    });\n  };\n\n  const answerQuestion = e => {\n    e.preventDefault();\n    if (answer !== '') evaluateAnswer(decodeHTML(correct), answer);\n    clearInputs();\n  };\n\n  const updateAnswer = e => {\n    const inputs = document.querySelectorAll('input[type=\"radio\"]');\n    inputs.forEach(input => {\n      if (input !== e.target) input.checked = false;\n    });\n    setAnswer(e.target.labels[0].innerText);\n  };\n\n  const clearInputs = () => {\n    const inputs = document.querySelectorAll('input[type=\"checkbox\"]');\n    inputs.forEach(input => input.checked = false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"current-q\",\n    onChange: e => updateAnswer(e),\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: decodeHTML(question)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n      children: [/*#__PURE__*/_jsxDEV(RadioGroup.Label, {\n        children: \"Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), addAnswers()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: answerQuestion,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuestionSlide, \"epwReYWmqQUcEJwlNWWu20QHlN0=\");\n\n_c = QuestionSlide;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionSlide\");","map":{"version":3,"sources":["/Users/jackson/turing/projects/trivia-app/src/components/QuestionSlide/QuestionSlide.js"],"names":["useState","decodeHTML","RadioGroup","QuestionSlide","category","incorrectAnswers","correct","question","type","evaluateAnswer","answer","setAnswer","addAnswers","randomIndex","Math","floor","random","includes","splice","map","index","checked","answerQuestion","e","preventDefault","clearInputs","updateAnswer","inputs","document","querySelectorAll","forEach","input","target","labels","innerText"],"mappings":";;;AAAA,OAAO,sBAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,UAAT,QAA2B,mBAA3B;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,gBAAX;AAA6BC,EAAAA,OAA7B;AAAsCC,EAAAA,QAAtC;AAAgDC,EAAAA,IAAhD;AAAsDC,EAAAA;AAAtD,CAAD,KAA2E;AAAA;;AAEtG,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMY,UAAU,GAAG,MAAM;AACvB,UAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAApB;;AACA,QAAI,CAACX,gBAAgB,CAACY,QAAjB,CAA0BX,OAA1B,CAAL,EAAyC;AACvCD,MAAAA,gBAAgB,CAACa,MAAjB,CAAwBL,WAAxB,EAAqC,CAArC,EAAwCP,OAAxC;AACD;;AACD,WAAOD,gBAAgB,CAACc,GAAjB,CAAqB,CAACT,MAAD,EAASU,KAAT,KAAmB;AAC7C,0BACA,QAAC,UAAD,CAAY,MAAZ;AAAmB,QAAA,KAAK,EAAEV,MAA1B;AAAA,kBAIC,CAAC;AAAEW,UAAAA;AAAF,SAAD,kBACC;AAAM,UAAA,SAAS,EAAEA,OAAO,GAAG,aAAH,GAAmB,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,cADA,CAD6C,CAW7C;AACA;AACA;AACA;AACD,KAfM,CAAP;AAiBD,GAtBD;;AAwBA,QAAMC,cAAc,GAAIC,CAAD,IAAO;AAC5BA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAId,MAAM,KAAK,EAAf,EAAmBD,cAAc,CAACR,UAAU,CAACK,OAAD,CAAX,EAAsBI,MAAtB,CAAd;AACnBe,IAAAA,WAAW;AACZ,GAJD;;AAMA,QAAMC,YAAY,GAAIH,CAAD,IAAO;AAC1B,UAAMI,MAAM,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,qBAA1B,CAAf;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAeC,KAAK,IAAI;AACtB,UAAIA,KAAK,KAAKR,CAAC,CAACS,MAAhB,EAAwBD,KAAK,CAACV,OAAN,GAAgB,KAAhB;AACzB,KAFD;AAGAV,IAAAA,SAAS,CAACY,CAAC,CAACS,MAAF,CAASC,MAAT,CAAgB,CAAhB,EAAmBC,SAApB,CAAT;AACD,GAND;;AAQA,QAAMT,WAAW,GAAG,MAAM;AACxB,UAAME,MAAM,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,wBAA1B,CAAf;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACV,OAAN,GAAgB,KAAxC;AACD,GAHD;;AAKA,sBACE;AAAM,IAAA,SAAS,EAAC,WAAhB;AAA4B,IAAA,QAAQ,EAAGE,CAAD,IAAOG,YAAY,CAACH,CAAD,CAAzD;AAAA,4BACE;AAAA,gBAAKtB,UAAU,CAACM,QAAD;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAA,8BACE,QAAC,UAAD,CAAY,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAGGK,UAAU,EAHb;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAQ,MAAA,OAAO,EAAEU,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA1DM;;GAAMnB,a;;KAAAA,a","sourcesContent":["import './QuestionSlide.scss'\nimport { useState } from 'react'\nimport { decodeHTML } from '../../utilities'\nimport { RadioGroup } from '@headlessui/react'\n\nexport const QuestionSlide = ({category, incorrectAnswers, correct, question, type, evaluateAnswer}) => {\n\n  const [answer, setAnswer] = useState('')\n\n  const addAnswers = () => {\n    const randomIndex = Math.floor(Math.random() * 4)\n    if (!incorrectAnswers.includes(correct)) {\n      incorrectAnswers.splice(randomIndex, 0, correct);\n    }\n    return incorrectAnswers.map((answer, index) => {\n      return (\n      <RadioGroup.Option value={answer}>\n      {/*\n        Use the `checked` render prop to conditionally style the checked item.\n      */}\n      {({ checked }) => (\n        <span className={checked ? \"bg-blue-200\" : \"\"}>Startup</span>\n      )}\n    </RadioGroup.Option>)\n      \n      // <div className=\"option\">\n      // <input type=\"checkbox\" id={'opt' + index + 1} name=\"option\"/>\n      // <label htmlFor={'opt' + index + 1}>{decodeHTML(answer)}</label>\n      // </div>\n    })\n    \n  }\n\n  const answerQuestion = (e) => {\n    e.preventDefault()\n    if (answer !== '') evaluateAnswer(decodeHTML(correct), answer)\n    clearInputs()\n  }\n\n  const updateAnswer = (e) => {\n    const inputs = document.querySelectorAll('input[type=\"radio\"]')\n    inputs.forEach(input => {\n      if (input !== e.target) input.checked = false;\n    })\n    setAnswer(e.target.labels[0].innerText)\n  }\n\n  const clearInputs = () => {\n    const inputs = document.querySelectorAll('input[type=\"checkbox\"]')\n    inputs.forEach(input => input.checked = false)\n  } \n\n  return (\n    <form className=\"current-q\" onChange={(e) => updateAnswer(e)}>\n      <h3>{decodeHTML(question)}</h3>\n      <RadioGroup>\n        <RadioGroup.Label>Answers</RadioGroup.Label>\n\n        {addAnswers()}\n      </RadioGroup>\n      <button onClick={answerQuestion}>Submit Answer</button>\n    </form>\n  )\n}"]},"metadata":{},"sourceType":"module"}